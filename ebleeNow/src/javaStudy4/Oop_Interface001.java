package javaStudy4;
/*인터페이스
 * 
 * 사용자 - 컴퓨터간 통신이 가능하도록 해주는 디바이스나 프로그램
 * 큰 틀에서 본다면 자바에서의 인터페이스 개념도 사전적 의미와 비슷하다.
 * "하나의 표준화"
 * 
 * 추상클래스 vs 인터페이스
 * 추상클래스와 거의 비슷하지만 그 추상화 정도가 더 높다(엄격하다) -> 따라서 일반메서드 멤버필드(변수)를 가질 수 없다.
 * 
 * 자바에서의 인터페이스 문법?
 * 표준화 및 규격을 인터페이스로 제공
 * 따라서 어떤 크래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언되어져있는 메서드를 구현해야 한다.
 * 인터페이스는 class 키워드를 사용하지 않고 별도의 키워드를 사용한다.
 * class -> extends    interface -> implement
 * 추상 클래스와 같이 케서드의 구체적인 내용은 기술되어져있지 않으므로 인터페이스를 상속받은 클래스에서 재정의(오버라이딩)하여 사용해야 한다.
 * 
 * 상속 vs 구현
 * 크래스와 인터페이스 이 둘의 가장 큰 차이점 중 하나는 "상속"이다. ->a,b
 * 자바에서 클래스는 "단일상속"만 가능하지만, 인터페이스는 "다중 상속"이 가능하다.
 * 그러나 인터페이스에서는 상속이라는 표현을 쓰지않고 extend 표현을 쓰지않고, "구현"의 의미를 강조한 ㄴimplement 키워드를 사용하여 다중 상속을 구현한다.
 * */
public class Oop_Interface001 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		
	}//main

}//class
